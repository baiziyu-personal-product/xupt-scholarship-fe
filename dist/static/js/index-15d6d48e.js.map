{"version":3,"file":"index-15d6d48e.js","sources":["../../../src/components/update-user-info/index.tsx"],"sourcesContent":["import { Button, DatePicker, Form, Input, InputNumber, message, Radio, Upload } from 'antd';\nimport { disabledFormFeatureYear, requiredRule, validateMessages } from '@/config/form';\nimport * as React from 'react';\nimport { LoadingOutlined, UserOutlined } from '@ant-design/icons';\nimport style from './style.module.less';\nimport * as uploadApi from '@/service/upload';\nimport * as userApi from '@/service/user';\nimport { useAuth } from '@/context/auth.context';\nimport { use } from 'echarts';\nimport moment from 'moment';\n\nexport interface CompleteUserInfoValue {\n  avatar: string;\n  name: string;\n  phone: string;\n  user_id: string;\n  student?: IStudentInfo;\n  manager?: IManagerInfo;\n}\n\nconst StudentTypeOptions: {\n  key: IStudentInfo['type'];\n  value: IStudentInfo['type'];\n  label: string;\n}[] = [\n    {\n      label: \"学硕\",\n      value: \"bachelor_degree\",\n      key: \"bachelor_degree\"\n    },\n    {\n      label: \"专硕\",\n      value: \"profession_degree\",\n      key: \"profession_degree\"\n    }\n  ]\n\ninterface IProps {\n  formValue: CompleteUserInfoValue;\n}\n\nconst StudentForm = () => (\n  <Form.Item noStyle name=\"student\">\n    <Form.Item\n      name={[\"student\", \"college\"]}\n      label=\"学院\"\n      rules={requiredRule}\n    >\n      <Input />\n    </Form.Item>\n    <Form.Item\n      name={[\"student\", \"professional\"]}\n      label=\"专业\"\n      rules={requiredRule}\n    >\n      <Input />\n    </Form.Item>\n    <Form.Item\n      name={[\"student\", \"grade\"]}\n      label=\"年级\"\n      rules={requiredRule}\n    >\n      <DatePicker picker=\"year\" suffixIcon={\"级\"} disabledDate={disabledFormFeatureYear} />\n    </Form.Item>\n    <Form.Item\n      name={[\"student\", \"class\"]}\n      label=\"班级\"\n      rules={requiredRule}\n    >\n      <InputNumber\n        min={1}\n        precision={0}\n        addonAfter=\"班\"\n      />\n    </Form.Item>\n    <Form.Item\n      name={[\"student\", \"type\"]}\n      label=\"硕士类型\"\n      rules={requiredRule}\n    >\n      <Radio.Group\n        buttonStyle=\"solid\"\n        options={StudentTypeOptions}\n        optionType=\"button\"\n      />\n    </Form.Item>\n  </Form.Item>\n)\n\nconst ManagerForm = () => (\n  <Form.Item noStyle name=\"manager\">\n    <Form.Item\n      name={[\"manager\", \"department\"]}\n      label=\"部门/学院\"\n      rules={requiredRule}\n    >\n      <Input placeholder=\"部门\" />\n    </Form.Item>\n    <Form.Item\n      name={[\"manager\", \"office\"]}\n      label=\"办公室/组\"\n      rules={requiredRule}\n    >\n      <Input placeholder=\"办公室\" />\n    </Form.Item>\n    <Form.Item\n      name={[\"manager\", \"position\"]}\n      label=\"职位\"\n      rules={requiredRule}\n    >\n      <Input placeholder=\"职位\" />\n    </Form.Item>\n  </Form.Item>\n)\n\nconst UploadUserInfo: React.FC<IProps> = (props) => {\n  const { formValue } = props;\n  const [form] = Form.useForm();\n  const { user } = useAuth();\n  const [imgUrl, setImgUrl] = React.useState(formValue.avatar);\n  const [loading, setLoading] = React.useState(false);\n  const [file, setFile] = React.useState<any>(null);\n  const uploadAvatarImg = async () => {\n    if (!file) return;\n    try {\n      setLoading(true);\n      const url = await uploadApi.postAvatar(file);\n      setImgUrl(`http://127.0.0.1:8096${url}`)\n      message.success(\"上传成功\");\n    } catch (error) {\n      message.error(\"上传失败\");\n    } finally {\n      setLoading(false);\n    }\n  }\n\n  const updateUserInfo = async () => {\n    try {\n      setLoading(true);\n      const value = await form.validateFields();\n      await userApi.postUpdateUserInfo({\n        avatar: imgUrl,\n        ...value\n      });\n      message.success(\"完善个人信成功\");\n      // location.reload();\n    } catch (error) {\n      message.error(\"完善个人信息失败\");\n    } finally {\n      setLoading(false);\n    }\n  }\n\n  React.useMemo(() => {\n    uploadAvatarImg();\n  }, [file]);\n\n  const uploadButton = (\n    <div>\n      {loading ? <LoadingOutlined /> : <UserOutlined />}\n      <div className={style['upload-avatar-text']}>上传头像</div>\n    </div>\n  );\n\n  return (\n    <Form\n      form={form}\n      initialValues={{\n        ...user,\n        student: {\n          ...user.student,\n          grade: moment(user.student?.grade || undefined)\n        }\n      }}\n      validateMessages={validateMessages}\n      labelAlign=\"left\"\n      {\n      ...{\n        labelCol: { span: 6, offset: 2 },\n        wrapperCol: { span: 12 },\n      }\n      }\n    >\n      <Upload\n        listType=\"picture-card\"\n        showUploadList={false}\n        className={style['upload-avatar-box']}\n        maxCount={1}\n        beforeUpload={(file) => {\n          setFile(file);\n          return false;\n        }}\n      >\n        {imgUrl ? <img src={imgUrl} alt=\"avatar\" style={{ width: '100%' }} /> : uploadButton}\n      </Upload>\n      <Form.Item\n        name=\"name\"\n        label=\"姓名\"\n        rules={requiredRule}\n      >\n        <Input placeholder=\"请输入你的姓名\" />\n      </Form.Item>\n      <Form.Item\n        name=\"phone\"\n        label=\"手机号\"\n        rules={requiredRule}\n      >\n        <Input type=\"tel\" placeholder=\"请填写你的常用手机号\" />\n      </Form.Item>\n      <Form.Item\n        name=\"user_id\"\n        label=\"学号/工号\"\n        rules={requiredRule}\n      >\n        <Input placeholder=\"请输入您的学号/工号\" />\n      </Form.Item>\n      {\n        user.identity === 'manager'\n          ? <ManagerForm />\n          : <StudentForm />\n      }\n      <Button\n        type=\"primary\"\n        block\n        loading={loading}\n        disabled={loading}\n        onClick={updateUserInfo}\n        className={style['submit-btn']}\n      >更新个人信息</Button>\n    </Form >\n  );\n};\n\nUploadUserInfo.defaultProps = {\n  formValue: {\n    avatar: '',\n    name: '',\n    phone: '',\n    user_id: '',\n  }\n}\n\nexport default React.memo(UploadUserInfo);"],"names":["React.useState","uploadApi.postAvatar","userApi.postUpdateUserInfo","React.memo"],"mappings":"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"}